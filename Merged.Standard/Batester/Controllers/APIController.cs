/*
 * BATester.Standard
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */
using System;
using System.Collections.Generic;
using System.Dynamic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Newtonsoft.Json.Converters;
using BATester.Standard;
using Merged.Standard.Utilities;
using Merged.Standard.Http.Request;
using Merged.Standard.Http.Response;
using Merged.Standard.Http.Client;
using BATester.Standard.Batester.Controllers;
using Merged.Standard.Exceptions;

namespace Merged.Standard.Batester.Controllers
{
    public class APIController: BatesterBaseController
    {
        public APIController(Configuration config) : base(config)
        {
            
        }

        public APIController(Configuration config, HttpCallBack httpCallBack) : base(config, httpCallBack)
        {
            
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <return>Returns the string response from the API call</return>
        public string GetBasicAuthTest()
        {
            Task<string> t = GetBasicAuthTestAsync();
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <return>Returns the string response from the API call</return>
        public async Task<string> GetBasicAuthTestAsync()
        {
            //the base uri for api requests
            string _baseUri = config.GetBaseURI();

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/auth/basic");

            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" }
            };

            //prepare the API call request to fetch the response
            HttpRequest _request = GetClientInstance().Get(_queryUrl,_headers, config.BatesterBasicAuthUserName, config.BatesterBasicAuthPassword);
            if (HttpCallBack != null)
            {
                HttpCallBack.OnBeforeHttpRequestEventHandler(GetClientInstance(), _request);
            }

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await GetClientInstance().ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request, _response);
            if (HttpCallBack != null)
            {
                HttpCallBack.OnAfterHttpResponseEventHandler(GetClientInstance(), _response);
            }

            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return _response.Body;
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

    }
} 