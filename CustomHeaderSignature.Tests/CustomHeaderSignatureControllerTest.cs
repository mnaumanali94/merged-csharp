/*
 * CustomHeaderSignature.Tests
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */
using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Threading.Tasks;
using Newtonsoft.Json.Converters;
using CustomHeaderSignature.Standard;
using CustomHeaderSignature.Standard.Utilities; 
using CustomHeaderSignature.Standard.Http.Client;
using CustomHeaderSignature.Standard.Http.Response;
using CustomHeaderSignature.Tests.Helpers;
using NUnit.Framework;
using CustomHeaderSignature.Standard;
using CustomHeaderSignature.Standard.Controllers;
using CustomHeaderSignature.Standard.Exceptions;

namespace CustomHeaderSignature.Tests
{
    [TestFixture]
    public class CustomHeaderSignatureControllerTest : ControllerTestBase
    {
        /// <summary>
        /// Controller instance (for all tests)
        /// </summary>
        private CustomHeaderSignatureController controller;

        /// <summary>
        /// Setup test class
        /// </summary>
        [OneTimeSetUp]
        public void SetUpDerived()
        {
            controller = new CustomHeaderSignatureController(config, httpCallBackHandler);
        }

        /// <summary>
        /// TODO: Add description for test TestCustomHeaderSignatureTest 
        /// </summary>
        [Test]
        public async Task TestCustomHeaderSignatureTest() 
        {

            // Perform API call
            string result = null;

            try
            {
                result = await controller.GetCustomHeaderSignatureAsync();
            }
            catch(APIException) {}

            // Test response code
            Assert.AreEqual(200, httpCallBackHandler.Response.StatusCode,
                    "Status should be 200");

            // Test whether the captured response is as we expected
            Assert.IsNotNull(result, "Result should exist");

            Assert.AreEqual("You've passed the test!", 
                    TestHelper.ConvertStreamToString(httpCallBackHandler.Response.RawBody),
                    "Response body should match exactly (string literal match)");
        }

    }
}